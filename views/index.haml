!!!
%html
  %head
    %script{:type => "text/javascript", :src  => "https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"}
  %body
    #header
    #stage{:style => "width: 1000px; height: 600px; margin-left: auto; margin-right: auto; border:1px solid #000000;"}
      %canvas{:id => "canvas", :width => 1000, :height => 600} 
    #footer
:javascript
  var current_game;
  var canvas;
  var ctx;
  var socket;
  var collected_msg = "";
  var country_colors = ['#FFFFFF','#FF0000','#FFFF00','#FF00FF','00FFFF'];

  function player(name,character,color){
    if (typeof color === 'undefined') { color = 0; }
    this.character = character;
    this.name = name;
    this.color = country_colors[color];
    this.X = 0;
    this.Y = 0;
    this.setPosition = function(X,Y){
      this.X = X;
      this.Y = Y; 
    };
    this.draw = function(){
      //console.log(this);
      ctx.fillStyle=this.color;
      ctx.fillRect(10*this.X,20*this.Y,10,20);
    };
  }
  
  function action(str){
    var regex = /start.*\n(.*)?\n((.|[\n\r])*)end/g;
    var match = regex.exec(str);
    this.type = match[1] ;
    this.data = match[2].replace(/ /g,'').split("\n");
    this.data.pop();
  }
  
  function game(arr) {

    this.set_player = function(name, character, color){
      temp_player = new player(name, character, color);
      this.players.push(temp_player);
    };

    this.team_1_score = 0;
    this.team_2_score = 0;
    this.team_1_country = arr[1];
    this.team_2_country = arr[2];

    this.players =  [];
    for (i=1;i <= arr[0];i++){
      if (i%2 == 0){
        this.set_player(arr[3+(i-1)*4],arr[4+(i-1)*3],this.team_1_country);
      } else {
        this.set_player(arr[3+(i-1)*4],arr[4+(i-1)*3],this.team_2_country);
      }
    }
    this.time = 90;
    this.ball =  new player("ball","O");
    this.ball.setPosition(50,15);



    this.update_game = function(arr){
      //console.log(arr);
      this.ball.setPosition(arr[0],arr[1]);
      for(i=0;i<this.players.length;i++){
        this.players[i].setPosition(arr[i*2+2],arr[3+i*2]);
      }
      //new_event(arr[arr.length]);
      draw_court();
      this.draw();
    };

    this.draw = function(){
      this.ball.draw();
      for(i=0;i<this.players.length;i++){
        this.players[i].draw();
      }
    };

  }

  function do_action(str){
    var tempAction = new action(str);
    //console.log("executing action:");
    //console.log(tempAction.type);
    
    switch (tempAction.type)
    {
      case 'update_gameboard': current_game.update_game(tempAction.data);
        break;
      case 'game_setup': current_game = new game(tempAction.data);
        break;
      default:  console.log("Unkown action");
    }
  }  

  function draw_court(){
    ctx.fillStyle="3016b0";
    ctx.fillRect(0,0,1000,600);
    ctx.fillStyle="2DD700";
    ctx.fillRect(10,20,980,560);
    ctx.fillRect(0,20*12,10,20*6);
    ctx.fillRect(990,20*12,10,20*6);
  }

  function connect(){
    try{
      var host = "ws://0.0.0.0:8080/#{rand(100)}";
      var socket = new WebSocket(host);
      socket.onopen = function(){
        // Create input method for the game
        socket.send("#{rand(4)+1}");
        socket.send("#{["Pablo","Daniel","Olof","Lisa","Nille","Jimmy"][rand(6)]}");
        socket.send("#{["P","A","C","D","E","F"][rand(6)]}");
      }
      socket.onmessage = function(msg){
        collected_msg += msg.data;
        if (collected_msg.match(/start(.|[\n\r])*?end/)) {
          do_action(collected_msg);
          collected_msg = "";
        }
      }
      socket.onclose = function(){
        //TODO disconnection info
      }
      return socket;
    } catch(exception){
       alert("Socket initialization failed");
    }
  }

  $(document).ready(function(){
    var canvas=document.getElementById("canvas");
    ctx=canvas.getContext("2d");
    draw_court();
    socket = connect(); 
  });
