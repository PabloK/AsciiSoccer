!!!
%html
  %head
    %script{:type => "text/javascript", :src  => "https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"}
  %body
    #header
    #stage{:style => "width: 1000px; height: 600px; margin-left: auto; margin-right: auto; border:1px solid #000000;"}
      %canvas{:id => "canvas", :width => 1000, :height => 600} 
    #footer
:javascript
  var game_court;
  var canvas;
  var ctx;
  var socket;
  var collected_msg = "";

  function person(name,color,character){
    this.character = character;
    this.name = name;
    this.color = "#000000";
    this.X = 0;
    this.Y = 0;
    this.setPosition = function(X,Y){
    
    }
    this.draw = function(){

    }
  }
  
  function action(str){
    var regex = /start.*\n(.*)?\n((.|[\n\r])*)end/g;
    var match = regex.exec(str);
    console.log(str);
    console.log(match);
    this.type = match[1] ;
    this.data = match[2].replace(/ /g,'').split("\n");
  }

  var game_settings = {
    players: [],
    set_player: function(){
      temp_player = new player(name, color, character);
      this.players.push(temp_player);
    },
  }

  function connect(){
    try{
      var host = "ws://0.0.0.0:8080/#{rand(100)}";
      var socket = new WebSocket(host);
      socket.onopen = function(){
        // Create input method for the game
        socket.send("#{rand(4)+1}");
        socket.send("#{["Pablo","Daniel","Olof","Lisa","Nille","Jimmy"][rand(6)]}");
        socket.send("#{["P","A","C","D","E","F"][rand(6)]}");
      }
      socket.onmessage = function(msg){
        collected_msg += msg.data;
        if (collected_msg.match(/start(.|[\n\r])*?end/)) {
          do_action(collected_msg);
          collected_msg = "";
        }
      }
      socket.onclose = function(){
        //TODO disconnection info
      }
      return socket;
    } catch(exception){
       alert("Socket initialization failed");
    }
  }
  function do_action(str){
    console.log("executing");
    var tempAction = new action(str);
    console.log("action type");
    console.log(tempAction.type);
    console.log("action data");
    console.log(tempAction.data);
  }
  function draw_scale(){
    for (var i=0;i<=30;i++)
    { 
      ctx.fillStyle="FF00FF";
      if (i%2 == 0) {
        ctx.fillStyle="0000FF";
      }
      ctx.fillRect(0,20*i,10,20);
    }
  }
  function draw_court(){
    ctx.fillStyle="3016b0";
    ctx.fillRect(0,0,1000,600);
    ctx.fillStyle="2DD700";
    ctx.fillRect(10,20,980,560);
    ctx.fillRect(0,20*12,10,20*6);
    ctx.fillRect(990,20*12,10,20*6);
    //draw_scale();
  }
  $(document).ready(function(){ 
    var canvas=document.getElementById("canvas");
    ctx=canvas.getContext("2d");
    draw_court();
    socket = connect(); 
  });
